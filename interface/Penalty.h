/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef PENALTY
#define PENALTY

#include <math.h>
#include "Math/SpecFunc.h"
#include "TMath.h"

#include "RooAbsReal.h"
#include "RooRealProxy.h"
 
class Penalty : public RooAbsReal {
 protected:

  RooRealProxy P1 ;
  RooRealProxy P2 ;
  RooRealProxy P3 ;
  RooRealProxy P4p ;
  RooRealProxy P5p ;
  RooRealProxy P6p ;
  RooRealProxy P8p ;

  double coeff1;
  double coeff4;
  double coeff5;
  double power;

  bool verbose;

  Double_t evaluate() const ;

 public:
  Penalty() {} ; 
  Penalty(const char *name, const char *title,
	  RooAbsReal& _P1,
	  RooAbsReal& _P2,
	  RooAbsReal& _P3,
	  RooAbsReal& _P4p,
	  RooAbsReal& _P5p,
	  RooAbsReal& _P6p,
	  RooAbsReal& _P8p,
	  Double_t _power,
	  Double_t _coeff1,
	  Double_t _coeff4,
	  Double_t _coeff5,
	  bool _verbose = false);
  Penalty(const Penalty& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new Penalty(*this,newname); }
  inline virtual ~Penalty() { }


  void setPower(double pow) { power = pow; }
  void setCoefficient(int num, double coeff) {
    switch(num) {
    case 1: coeff1=coeff; break;
    case 4: coeff4=coeff; break;
    case 5: coeff5=coeff; break;
    default: std::cout<<"Error, invalid coefficient index: "<<num<<" (valid values are 1,4,5)"<<std::endl;
    }
  }
  
  ClassDef(Penalty,1) // Penalty term in parameter space
    };

#endif
