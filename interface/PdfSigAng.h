/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef PDFSIGANG
#define PDFSIGANG

#include <math.h>
#include "Math/SpecFunc.h"
#include "TMath.h"

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooFit.h"
#include "Riostream.h"
#include "RooObjCacheManager.h"
 
class PdfSigAng : public RooAbsPdf {
 protected:

  RooRealProxy ctK ;
  RooRealProxy ctL ;
  RooRealProxy phi ;
  RooRealProxy mFrac ;

  RooRealProxy rtAngTerm;
  RooRealProxy wtAngTerm;

  RooRealProxy PenTerm;

  bool isPenalised;
  
  const RooAbsReal* penTermVal() const {
    // Return pointer to penalty term function
    return (RooAbsReal*) PenTerm.absArg() ;
  }

  const RooAbsReal* rtAngTermVal() const {
    // Return pointer to penalty term function
    return (RooAbsReal*) rtAngTerm.absArg() ;
  }

  const RooAbsReal* wtAngTermVal() const {
    // Return pointer to penalty term function
    return (RooAbsReal*) wtAngTerm.absArg() ;
  }

  Double_t evaluate() const ;

 public:
  PdfSigAng() {} ; 
  PdfSigAng(const char *name, const char *title,
	    RooAbsReal& _ctK,
	    RooAbsReal& _ctL,
	    RooAbsReal& _phi,
	    RooAbsReal& _mFrac,
	    RooAbsReal& _rtAngTerm,
	    RooAbsReal& _wtAngTerm,
	    RooAbsReal& _PenTerm);
  PdfSigAng(const char *name, const char *title,
	    RooAbsReal& _ctK,
	    RooAbsReal& _ctL,
	    RooAbsReal& _phi,
	    RooAbsReal& _mFrac,
	    RooAbsReal& _rtAngTerm,
	    RooAbsReal& _wtAngTerm
	    );
  PdfSigAng(const PdfSigAng& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new PdfSigAng(*this,newname); }
  inline virtual ~PdfSigAng() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  ClassDef(PdfSigAng,1) // PDF for (angular decay rate x efficiency) of both correctly-tagged and wrongly-tagged events
    };
 
#endif
