/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DECAYRATE_PEN
#define DECAYRATE_PEN

#include <math.h>
#include "Math/SpecFunc.h"
#include "TMath.h"

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooFit.h"
#include "Riostream.h"
 
class DecayRate_Pen : public RooAbsPdf {
 protected:

  RooRealProxy ctK ;
  RooRealProxy ctL ;
  RooRealProxy phi ;
  RooRealProxy Fl ;
  RooRealProxy P1 ;
  RooRealProxy P2 ;
  RooRealProxy P3 ;
  RooRealProxy P4p ;
  RooRealProxy P5p ;
  RooRealProxy P6p ;
  RooRealProxy P8p ;

  RooRealProxy PenTerm;
  
  const RooAbsReal* penTermVal() const {
    // Return pointer to penalty term function
    return (RooAbsReal*) PenTerm.absArg() ;
  }

  Double_t evaluate() const ;

 public:
  DecayRate_Pen() {} ; 
  DecayRate_Pen(const char *name, const char *title,
		RooAbsReal& _ctK,
		RooAbsReal& _ctL,
		RooAbsReal& _phi,
		RooAbsReal& _Fl,
		RooAbsReal& _P1,
		RooAbsReal& _P2,
		RooAbsReal& _P3,
		RooAbsReal& _P4p,
		RooAbsReal& _P5p,
		RooAbsReal& _P6p,
		RooAbsReal& _P8p,
		RooAbsReal& _PenTerm);
  DecayRate_Pen(const DecayRate_Pen& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new DecayRate_Pen(*this,newname); }
  inline virtual ~DecayRate_Pen() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  ClassDef(DecayRate_Pen,1) // PDF for angular decay rate description with penalty term
    };
 
#endif
