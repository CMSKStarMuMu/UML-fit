/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef PDFSIGMASS
#define PDFSIGMASS

#include <math.h>
#include "Math/SpecFunc.h"
#include "TMath.h"

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooRealVar.h"
#include "RooCategoryProxy.h"
#include "RooSetProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooFit.h"
#include "Riostream.h"
#include "RooObjCacheManager.h"
#include "PdfCBShape.h"

 
class PdfSigMass : public RooAbsPdf {
 protected:


  RooRealProxy m ;
  
  RooRealProxy mean     ;
  RooRealProxy sigma1   ;
  RooRealProxy sigma2   ;
  RooRealProxy alpha1   ;
  RooRealProxy alpha2   ;
  RooRealProxy n1       ;
  RooRealProxy n2       ;
  RooRealProxy f1rt     ;
  
  RooRealProxy mFrac ;

  RooRealProxy rtMassTerm;

//   RooRealProxy myrtMassTermPdf;
  
  
//   const Double_t rtMassTermVal() const {
//     // Return pointer to mass term function for RT
//     return (Double_t) rtMassTerm.eval() ;
//   }
// //   const RooAbsReal* myrtMassTermPdfVal() const {
// //     // Return pointer to penalty term function
// //     return (RooAbsReal*) myrtMassTermPdf.absArg() ;
// //   }
// // 
// //   PdfCBShape* rtMassTermPdf() const {
// //     // Return pointer to mass term function for RT
// //     RooAbsArg* absArg = rtMassTerm.absArg();
// //     PdfCBShape* pdf = dynamic_cast<PdfCBShape*>(absArg);    
// //     return pdf ;
// //   }
// //   const PdfCBShape* rtMassTermPdf() const {
// //     // Return pointer to mass term function for RT
// //     RooAbsArg* absArg = rtMassTerm.absArg();
// //     PdfCBShape* pdf = dynamic_cast<PdfCBShape*>(absArg);    
// //     return pdf ;
// //   }
//   const RooAbsReal* wtMassTermVal() const {
//     // Return pointer to mass term function for RT
//     return (RooAbsReal*) wtMassTerm.absArg() ;
//   }
// 
//   PdfCBShape* myrtMassTermPdf() const  {
//     PdfCBShape* rt =  new PdfCBShape("cbs", "Crystal Ball shape", 
//                                    *(RooAbsReal*)m.absArg(), 
//                                    *(RooAbsReal*)mean_rt.absArg(), 
//                                    *(RooAbsReal*)sigma_rt.absArg(), 
//                                    *(RooAbsReal*)alpha1.absArg(), 
//                                    *(RooAbsReal*)n1.absArg(), 
//                                    *(RooAbsReal*)alpha2.absArg(), 
//                                    *(RooAbsReal*)n2.absArg());
//   
//     return rt;
//   }
  Double_t evaluate() const ;

 public:
  PdfSigMass() {} ; 
  PdfSigMass(const char *name, const char *title,
	    RooAbsReal& _m,
	    RooAbsReal& _mean  ,
	    RooAbsReal& _sigma1,
	    RooAbsReal& _alpha1,
	    RooAbsReal& _alpha2,
	    RooAbsReal& _n1    ,
	    RooAbsReal& _n2    ,
	    RooAbsReal& _mFrac ,
	    RooAbsReal& _rtMassTerm	    );

  PdfSigMass(const char *name, const char *title,
	    RooAbsReal& _m,
	    RooAbsReal& _mean  ,
	    RooAbsReal& _sigma1,
	    RooAbsReal& _sigma2,
	    RooAbsReal& _alpha1,
	    RooAbsReal& _alpha2,
	    RooAbsReal& _n1    ,
	    RooAbsReal& _n2    ,
	    RooAbsReal& _f1rt  ,
	    RooAbsReal& _mFrac ,
	    RooAbsReal& _rtMassTerm	    );

  PdfSigMass(const PdfSigMass& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new PdfSigMass(*this,newname); }
  inline virtual ~PdfSigMass() { }

//   Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
//   Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  ClassDef(PdfSigMass,1) // PDF for (angular decay rate x efficiency) of both correctly-tagged and wrongly-tagged events
    };
 
#endif
