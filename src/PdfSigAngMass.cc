/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "PdfSigAngMass.h" 

ClassImp(PdfSigAngMass) 

PdfSigAngMass::PdfSigAngMass(const char *name, const char *title, 
		     RooAbsReal& _ctK,
		     RooAbsReal& _ctL,
		     RooAbsReal& _phi,
		     RooAbsReal& _m,
         	     RooAbsReal& _mean_rt  ,
         	     RooAbsReal& _sigma_rt1,
         	     RooAbsReal& _alpha_rt1,
         	     RooAbsReal& _alpha_rt2,
         	     RooAbsReal& _n_rt1    ,
         	     RooAbsReal& _n_rt2    ,
         	     RooAbsReal& _mean_wt  ,
         	     RooAbsReal& _sigma_wt1,
         	     RooAbsReal& _alpha_wt1,
         	     RooAbsReal& _alpha_wt2,
         	     RooAbsReal& _n_wt1    ,
         	     RooAbsReal& _n_wt2    ,
		     RooAbsReal& _mFrac,
		     RooAbsReal& _PenTerm,
                     RooAbsReal& _rtAngTerm,
                     RooAbsReal& _wtAngTerm,
		     RooAbsReal& _rtMassTerm,
		     RooAbsReal& _wtMassTerm
) :
  RooAbsPdf(name,title), 
  ctK("ctK","ctK",this,_ctK),
  ctL("ctL","ctL",this,_ctL),
  phi("phi","phi",this,_phi),
  m("m","m",this,_m),
  mean_rt("mean_rt"  , "mean_rt"  ,this,_mean_rt  ),
  sigma_rt1("sigma_rt1" , "sigma_rt1" ,this,_sigma_rt1 ),
  alpha_rt1("alpha_rt1", "alpha_rt1",this,_alpha_rt1),
  alpha_rt2("alpha_rt2", "alpha_rt2",this,_alpha_rt2),
  n_rt1("n_rt1"    , "n_rt1"    ,this,_n_rt1    ),
  n_rt2("n_rt2"    , "n_rt2"    ,this,_n_rt2    ),
  mean_wt("mean_wt"  , "mean_wt"  ,this,_mean_wt  ),
  sigma_wt1("sigma_wt1" , "sigma_wt1" ,this,_sigma_wt1 ),
  alpha_wt1("alpha_wt1", "alpha_wt1",this,_alpha_wt1),
  alpha_wt2("alpha_wt2", "alpha_wt2",this,_alpha_wt2),
  n_wt1("n_wt1"    , "n_wt1"    ,this,_n_wt1    ),
  n_wt2("n_wt2"    , "n_wt2"    ,this,_n_wt2    ),
  mFrac("mFrac","mFrac",this,_mFrac),
  PenTerm("PenTerm","PenTerm",this,_PenTerm),
  rtAngTerm("rtAngTerm","rtAngTerm",this,_rtAngTerm),
  wtAngTerm("wtAngTerm","wtAngTerm",this,_wtAngTerm),
  rtMassTerm("rtMassTerm","rtMassTerm",this,_rtMassTerm),
  wtMassTerm("wtMassTerm","wtMassTerm",this,_wtMassTerm)
{

  isPenalised = true;

}
PdfSigAngMass::PdfSigAngMass(const char *name, const char *title, 
		     RooAbsReal& _ctK,
		     RooAbsReal& _ctL,
		     RooAbsReal& _phi,
		     RooAbsReal& _m,
         	     RooAbsReal& _mean_rt  ,
         	     RooAbsReal& _sigma_rt1,
         	     RooAbsReal& _alpha_rt1,
         	     RooAbsReal& _alpha_rt2,
         	     RooAbsReal& _n_rt1    ,
         	     RooAbsReal& _n_rt2    ,
         	     RooAbsReal& _mean_wt  ,
         	     RooAbsReal& _sigma_wt1,
         	     RooAbsReal& _alpha_wt1,
         	     RooAbsReal& _alpha_wt2,
         	     RooAbsReal& _n_wt1    ,
         	     RooAbsReal& _n_wt2    ,
		     RooAbsReal& _mFrac,
                     RooAbsReal& _rtAngTerm,
                     RooAbsReal& _wtAngTerm,
		     RooAbsReal& _rtMassTerm,
		     RooAbsReal& _wtMassTerm
) :
  RooAbsPdf(name,title), 
  ctK("ctK","ctK",this,_ctK),
  ctL("ctL","ctL",this,_ctL),
  phi("phi","phi",this,_phi),
  m("m","m",this,_m),
  mean_rt("mean_rt"  , "mean_rt"  ,this,_mean_rt  ),
  sigma_rt1("sigma_rt1" , "sigma_rt1" ,this,_sigma_rt1 ),
  alpha_rt1("alpha_rt1", "alpha_rt1",this,_alpha_rt1),
  alpha_rt2("alpha_rt2", "alpha_rt2",this,_alpha_rt2),
  n_rt1("n_rt1"    , "n_rt1"    ,this,_n_rt1    ),
  n_rt2("n_rt2"    , "n_rt2"    ,this,_n_rt2    ),
  mean_wt("mean_wt"  , "mean_wt"  ,this,_mean_wt  ),
  sigma_wt1("sigma_wt1" , "sigma_wt1" ,this,_sigma_wt1 ),
  alpha_wt1("alpha_wt1", "alpha_wt1",this,_alpha_wt1),
  alpha_wt2("alpha_wt2", "alpha_wt2",this,_alpha_wt2),
  n_wt1("n_wt1"    , "n_wt1"    ,this,_n_wt1    ),
  n_wt2("n_wt2"    , "n_wt2"    ,this,_n_wt2    ),
  mFrac("mFrac","mFrac",this,_mFrac),
  rtAngTerm("rtAngTerm","rtAngTerm",this,_rtAngTerm),
  wtAngTerm("wtAngTerm","wtAngTerm",this,_wtAngTerm),
  rtMassTerm("rtMassTerm","rtMassTerm",this,_rtMassTerm),
  wtMassTerm("wtMassTerm","wtMassTerm",this,_wtMassTerm)
{

  isPenalised = false;

}

PdfSigAngMass::PdfSigAngMass(const char *name, const char *title, 
		     RooAbsReal& _ctK,
		     RooAbsReal& _ctL,
		     RooAbsReal& _phi,
		     RooAbsReal& _m,
         	     RooAbsReal& _mean_rt  ,
         	     RooAbsReal& _sigma_rt1,
         	     RooAbsReal& _sigma_rt2 ,
         	     RooAbsReal& _alpha_rt1,
         	     RooAbsReal& _alpha_rt2,
         	     RooAbsReal& _n_rt1    ,
         	     RooAbsReal& _n_rt2    ,
         	     RooAbsReal& _f1rt  ,
         	     RooAbsReal& _mean_wt  ,
         	     RooAbsReal& _sigma_wt1,
         	     RooAbsReal& _alpha_wt1,
         	     RooAbsReal& _alpha_wt2,
         	     RooAbsReal& _n_wt1    ,
         	     RooAbsReal& _n_wt2    ,
		     RooAbsReal& _mFrac,
		     RooAbsReal& _PenTerm,
                     RooAbsReal& _rtAngTerm,
                     RooAbsReal& _wtAngTerm,
		     RooAbsReal& _rtMassTerm,
		     RooAbsReal& _wtMassTerm
		     ) :
  RooAbsPdf(name,title), 
  ctK("ctK","ctK",this,_ctK),
  ctL("ctL","ctL",this,_ctL),
  phi("phi","phi",this,_phi),
  m("m","m",this,_m),
  mean_rt("mean_rt", "mean_rt"  ,this,_mean_rt),
  sigma_rt1("sigma_rt1", "sigma_rt1" ,this,_sigma_rt1),
  sigma_rt2("sigma_rt2", "sigma_rt2" ,this,_sigma_rt2),
  alpha_rt1("alpha_rt1", "alpha_rt1",this,_alpha_rt1),
  alpha_rt2("alpha_rt2", "alpha_rt2",this,_alpha_rt2),
  n_rt1("n_rt1", "n_rt1",this,_n_rt1),
  n_rt2("n_rt2", "n_rt2",this,_n_rt2),
  f1rt("f1rt", "f1rt",this,_f1rt),
  mean_wt("mean_wt"  , "mean_wt"  ,this,_mean_wt  ),
  sigma_wt1("sigma_wt1" , "sigma_wt1" ,this,_sigma_wt1 ),
  alpha_wt1("alpha_wt1", "alpha_wt1",this,_alpha_wt1),
  alpha_wt2("alpha_wt2", "alpha_wt2",this,_alpha_wt2),
  n_wt1("n_wt1"    , "n_wt1"    ,this,_n_wt1    ),
  n_wt2("n_wt2"    , "n_wt2"    ,this,_n_wt2    ),
  mFrac("mFrac","mFrac",this,_mFrac),
  PenTerm("PenTerm","PenTerm",this,_PenTerm),
  rtAngTerm("rtAngTerm","rtAngTerm",this,_rtAngTerm),
  wtAngTerm("wtAngTerm","wtAngTerm",this,_wtAngTerm),
  rtMassTerm("rtMassTerm","rtMassTerm",this,_rtMassTerm),
  wtMassTerm("wtMassTerm","wtMassTerm",this,_wtMassTerm)
{

  isPenalised = true;

}

PdfSigAngMass::PdfSigAngMass(const char *name, const char *title, 
		     RooAbsReal& _ctK,
		     RooAbsReal& _ctL,
		     RooAbsReal& _phi,
		     RooAbsReal& _m,
         	     RooAbsReal& _mean_rt  ,
         	     RooAbsReal& _sigma_rt1,
         	     RooAbsReal& _sigma_rt2 ,
         	     RooAbsReal& _alpha_rt1,
         	     RooAbsReal& _alpha_rt2,
         	     RooAbsReal& _n_rt1    ,
         	     RooAbsReal& _n_rt2    ,
         	     RooAbsReal& _f1rt  ,
         	     RooAbsReal& _mean_wt  ,
         	     RooAbsReal& _sigma_wt1,
         	     RooAbsReal& _alpha_wt1,
         	     RooAbsReal& _alpha_wt2,
         	     RooAbsReal& _n_wt1    ,
         	     RooAbsReal& _n_wt2    ,
		     RooAbsReal& _mFrac,
                     RooAbsReal& _rtAngTerm,
                     RooAbsReal& _wtAngTerm,
		     RooAbsReal& _rtMassTerm,
		     RooAbsReal& _wtMassTerm
		     ) :
  RooAbsPdf(name,title), 
  ctK("ctK","ctK",this,_ctK),
  ctL("ctL","ctL",this,_ctL),
  phi("phi","phi",this,_phi),
  m("m","m",this,_m),
  mean_rt("mean_rt", "mean_rt"  ,this,_mean_rt),
  sigma_rt1("sigma_rt1", "sigma_rt1" ,this,_sigma_rt1),
  sigma_rt2("sigma_rt2", "sigma_rt2" ,this,_sigma_rt2),
  alpha_rt1("alpha_rt1", "alpha_rt1",this,_alpha_rt1),
  alpha_rt2("alpha_rt2", "alpha_rt2",this,_alpha_rt2),
  n_rt1("n_rt1", "n_rt1",this,_n_rt1),
  n_rt2("n_rt2", "n_rt2",this,_n_rt2),
  f1rt("f1rt", "f1rt",this,_f1rt),
  mean_wt("mean_wt"  , "mean_wt"  ,this,_mean_wt  ),
  sigma_wt1("sigma_wt1" , "sigma_wt1" ,this,_sigma_wt1 ),
  alpha_wt1("alpha_wt1", "alpha_wt1",this,_alpha_wt1),
  alpha_wt2("alpha_wt2", "alpha_wt2",this,_alpha_wt2),
  n_wt1("n_wt1"    , "n_wt1"    ,this,_n_wt1    ),
  n_wt2("n_wt2"    , "n_wt2"    ,this,_n_wt2    ),
  mFrac("mFrac","mFrac",this,_mFrac),
  rtAngTerm("rtAngTerm","rtAngTerm",this,_rtAngTerm),
  wtAngTerm("wtAngTerm","wtAngTerm",this,_wtAngTerm),
  rtMassTerm("rtMassTerm","rtMassTerm",this,_rtMassTerm),
  wtMassTerm("wtMassTerm","wtMassTerm",this,_wtMassTerm)
{

  isPenalised = false;

}


PdfSigAngMass::PdfSigAngMass(const PdfSigAngMass& other, const char* name) :  
  RooAbsPdf(other,name), 
  ctK("ctK",this,other.ctK),
  ctL("ctL",this,other.ctL),
  phi("phi",this,other.phi),
  m("m",this,other.m),
  mean_rt("mean_rt",this,other.mean_rt),
  sigma_rt1("sigma_rt1",this,other.sigma_rt1),
  sigma_rt2("sigma_rt2",this,other.sigma_rt2),
  alpha_rt1("alpha_rt1",this,other.alpha_rt1),
  alpha_rt2("alpha_rt2",this,other.alpha_rt2),
  n_rt1("n_rt1",this,other.n_rt1),
  n_rt2("n_rt2",this,other.n_rt2),
  f1rt("f1rt",this,other.f1rt),
  mean_wt("mean_wt",this,other.mean_wt),
  sigma_wt1("sigma_wt1",this,other.sigma_wt1),
  alpha_wt1("alpha_wt1",this,other.alpha_wt1),
  alpha_wt2("alpha_wt2",this,other.alpha_wt2),
  n_wt1("n_wt1",this,other.n_wt1),
  n_wt2("n_wt2",this,other.n_wt2),
  mFrac("mFrac",this,other.mFrac),
  rtAngTerm("rtAngTerm", this, other.rtAngTerm),
  wtAngTerm("wtAngTerm", this, other.wtAngTerm),
  rtMassTerm("rtMassTerm", this, other.rtMassTerm),
  wtMassTerm("wtMassTerm", this, other.wtMassTerm)
{

  if (other.isPenalised) {
    PenTerm = RooRealProxy("PenTerm",this,other.PenTerm);
    isPenalised = true;
  } else isPenalised = false;

}



Double_t PdfSigAngMass::evaluate() const 
{

  double penalty = 1;
  if (isPenalised) penalty = penTermVal()->getVal();

  double decCT_times_eff = rtAngTermVal()->getVal();
  double decWT_times_eff = wtAngTermVal()->getVal();

  RooAbsReal & marg   = (RooAbsReal&)m.arg();
  double mCT = ((RooAbsPdf&)(rtMassTerm.arg())).getVal( RooArgSet(marg)) ;
  double mWT = ((RooAbsPdf&)(wtMassTerm.arg())).getVal( RooArgSet(marg)) ;

  double ret = (decCT_times_eff * mCT + mFrac * decWT_times_eff * mWT) * penalty;
  return ret;

}

namespace {
  Bool_t fullRangeCosT(const RooRealProxy& x ,const char* range)
  {
    // set accepted integration range for cosTheta variables
    return range == 0 || strlen(range) == 0
      ? std::fabs(x.min() + 1.) < 1.e-5 && std::fabs(x.max() - 1.) < 1.e-5
      : std::fabs(x.min(range) + 1.) < 1.e-5 && std::fabs(x.max(range) - 1.) < 1.e-5;
  }
  Bool_t fullRangePhi(const RooRealProxy& x ,const char* range)
  {
    // set accepted integration range for phi variable
    return range == 0 || strlen(range) == 0
      ? std::fabs(x.min() + TMath::Pi()) < 1.e-3 && std::fabs(x.max() - TMath::Pi()) < 1.e-3
      : std::fabs(x.min(range) + TMath::Pi()) < 1.e-3 && std::fabs(x.max(range) - TMath::Pi()) < 1.e-3;
  }
  Bool_t fullRangeMass(const RooRealProxy& x ,const char* range)
  {
    // set accepted integration range for mass variables
    return range == 0 || strlen(range) == 0
      ? std::fabs(x.min() - 5.) < 1.e-5 && std::fabs(x.max() - 5.6) < 1.e-5
      : std::fabs(x.min(range) - 5.) < 1.e-5 && std::fabs(x.max(range) - 5.6) < 1.e-5;
  }
}

Int_t PdfSigAngMass::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const
{
  if ( matchArgs(allVars,analVars,ctK,ctL,phi,m) ){
    if ( fullRangeCosT(ctK,rangeName) && fullRangeCosT(ctL,rangeName) && fullRangePhi(phi,rangeName) && fullRangeMass(m,rangeName) ){
//       std::cout << "code 1"<<  std::endl;
      return 1 ;
    }  
  }
  if ( matchArgs(allVars,analVars,ctK,ctL,phi) ){
    if ( fullRangeCosT(ctK,rangeName) && fullRangeCosT(ctL,rangeName) && fullRangePhi(phi,rangeName) ){
//       std::cout << "code 2"<<  std::endl;
      return 2 ;
    }
  }
  if ( matchArgs(allVars,analVars,ctL,phi,m) ){
    if ( fullRangeCosT(ctL,rangeName) && fullRangePhi(phi,rangeName) && fullRangeMass(m,rangeName) ){
//       std::cout << "code 3"<<  std::endl;
      return 3 ;
    }  
  }
  if ( matchArgs(allVars,analVars,ctK,phi,m) ){
    if ( fullRangeCosT(ctK,rangeName) && fullRangePhi(phi,rangeName) && fullRangeMass(m,rangeName) ){
//       std::cout << "code 4"<<  std::endl;
      return 4 ;
    }  
  }
  if ( matchArgs(allVars,analVars,ctK,ctL,m) ){
    if ( fullRangeCosT(ctK,rangeName) && fullRangeCosT(ctL,rangeName) && fullRangeMass(m,rangeName) ){
//       std::cout << "code 5"<<  std::endl;
      return 5 ;
    }  
  }
  // the lack of analytical integral for the subsets of angular variables does not slow down the fit
  // since only the complete integration is used there
  // if one wants to speed up also the PDF projection for plotting, the other analytical integrals can be computed
  // but it seems a huge effort to me
  return 0 ;

}

Double_t PdfSigAngMass::analyticalIntegral(Int_t code, const char* rangeName) const
{
  assert(code>0 && code<6) ;

  double theIntegral;
  double rtAngIntegral, wtAngIntegral;
  double rtMassIntegral, wtMassIntegral;
  
  auto ctKarg = (RooAbsReal*)ctK.absArg();
  auto ctLarg = (RooAbsReal*)ctL.absArg();
  auto phiarg = (RooAbsReal*)phi.absArg();
  auto marg   = (RooAbsReal*)m  .absArg();

  RooAbsReal & rtMass = (RooAbsReal&)rtMassTerm.arg();
  RooAbsReal & wtMass = (RooAbsReal&)wtMassTerm.arg();

  if (code == 1){

    rtAngIntegral = rtAngTermVal()->analyticalIntegral(1,rangeName);
    wtAngIntegral = wtAngTermVal()->analyticalIntegral(1,rangeName);

    if (rtAngIntegral<=0) {
        if (rtAngIntegral<0) std::cout<<"ERROR! Negative ct pdf integral, fake value returned"<<std::endl;
        else std::cout<<"ERROR! Null ct pdf integral, fake value returned"<<std::endl;
        return 1e-55;
      }
    if (wtAngIntegral<=0) {
        if (wtAngIntegral<0) std::cout<<"ERROR! Negative wt pdf integral, fake value returned"<<std::endl;
        else std::cout<<"ERROR! Null wt pdf integral, fake value returned"<<std::endl;
        return 1e-55;
      }

    rtMassIntegral = 1; //((RooAbsReal* )rtMass.createIntegral(*marg))->getVal();
    wtMassIntegral = 1; //((RooAbsReal* )wtMass.createIntegral(*marg))->getVal();

//     std::cout <<  "PdfSigAngMass:analyticalIntegral1:mass  " << rtMassIntegral << " \t" << wtMassIntegral  << std::endl;
//     std::cout <<  "PdfSigAngMass:analyticalIntegral1:ang   " << rtAngIntegral  << " \t" << wtAngIntegral    << std::endl;

  }
  
  else if (code ==2 ){

    rtAngIntegral = rtAngTermVal()->analyticalIntegral(1,rangeName);
    wtAngIntegral = wtAngTermVal()->analyticalIntegral(1,rangeName);

    if (rtAngIntegral<=0) {
        if (rtAngIntegral<0) std::cout<<"ERROR! Negative ct pdf integral, fake value returned"<<std::endl;
        else std::cout<<"ERROR! Null ct pdf integral, fake value returned"<<std::endl;
        return 1e-55;
      }
    if (wtAngIntegral<=0) {
        if (wtAngIntegral<0) std::cout<<"ERROR! Negative wt pdf integral, fake value returned"<<std::endl;
        else std::cout<<"ERROR! Null wt pdf integral, fake value returned"<<std::endl;
        return 1e-55;
      }

    rtMassIntegral = ((RooAbsPdf&)(rtMassTerm.arg())).getVal(RooArgSet(*marg));
    wtMassIntegral = ((RooAbsPdf&)(wtMassTerm.arg())).getVal(RooArgSet(*marg));

//     std::cout <<  "PdfSigAngMass:analyticalIntegral2:mass  " << rtMassIntegral << " \t" << wtMassIntegral  << std::endl;
//     std::cout <<  "PdfSigAngMass:analyticalIntegral2:ang   " << rtAngIntegral  << " \t" << wtAngIntegral    << std::endl;
  }

  else if (code >=3 && code <=5){

    rtMassIntegral = 1; //((RooAbsReal* )rtMass.createIntegral(*marg))->getVal();
    wtMassIntegral = 1; //((RooAbsReal* )wtMass.createIntegral(*marg))->getVal();
//     std::cout <<  "PdfSigAngMass:analyticalIntegral345:mass  " << rtMassIntegral << " \t" << wtMassIntegral  << std::endl;

    if (code ==3){
      //matchArgs(allVars,analVars,ctL,phi,m)
      rtAngIntegral = rtAngTermVal()->createIntegral(RooArgSet(*ctLarg,*phiarg))->getVal();
      wtAngIntegral = wtAngTermVal()->createIntegral(RooArgSet(*ctLarg,*phiarg))->getVal();
//       std::cout <<  "PdfSigAngMass:analyticalIntegral3:ang  " << rtAngIntegral << " \t" << wtAngIntegral  << std::endl;
    }
    else if (code ==4){
      //matchArgs(allVars,analVars,ctK,phi,m)
      rtAngIntegral = rtAngTermVal()->createIntegral(RooArgSet(*ctKarg,*phiarg))->getVal();
      wtAngIntegral = wtAngTermVal()->createIntegral(RooArgSet(*ctKarg,*phiarg))->getVal();
//       std::cout <<  "PdfSigAngMass:analyticalIntegral4:ang  " << rtAngIntegral << " \t" << wtAngIntegral  << std::endl;
    }
    else if (code ==5){
      //matchArgs(allVars,analVars,ctK,ctL,m)
      rtAngIntegral = rtAngTermVal()->createIntegral(RooArgSet(*ctKarg,*ctLarg))->getVal();
      wtAngIntegral = wtAngTermVal()->createIntegral(RooArgSet(*ctKarg,*ctLarg))->getVal();
//       std::cout <<  "PdfSigAngMass:analyticalIntegral5:ang  " << rtAngIntegral << " \t" << wtAngIntegral  << std::endl;
    }
  }

  theIntegral = rtAngIntegral*rtMassIntegral + mFrac*wtAngIntegral*wtMassIntegral  ;
  return theIntegral;
}
